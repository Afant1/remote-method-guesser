#!/bin/bash

type _comp_filter &> /dev/null || return
type _comp_contains &> /dev/null || return
type _comp_filter_shorts &> /dev/null || return
type _comp_get_parameter &> /dev/null || return

function _rmg() {

    local cur prev words opts arg args gadgets value_options
    _init_completion || return

    value_options="--argument-position --bound-name --component --config --objid --plugin --sample-folder"
    value_options="$value_options --signature --template-folder --threads --wordlist-file --wordlist-folder --yso"

    _count_args "" "@(${value_options// /|})"
    _comp_get_parameter 3
    COMPREPLY=()

    gadgets="BeanShell1 C3P0 Clojure CommonsBeanutils1 CommonsCollections1 CommonsCollections2"
    gadgets="$gadgets CommonsCollections3 CommonsCollections4 CommonsCollections5 CommonsCollections6"
    gadgets="$gadgets CommonsCollections7 FileUpload1 Groovy1 Hibernate1 Hibernate2 JBossInterceptors1"
    gadgets="$gadgets JRMPClient JRMPListener JSON1 JavassistWeld1 Jdk7u21 Jython1 MozillaRhino1 MozillaRhino2"
    gadgets="$gadgets Myfaces1 Myfaces2 ROME Spring1 Spring2 URLDNS Vaadin1 Wicket1 JRMPClient2 AnTrinh"

    operations="bind call codebase enum guess known listen rebind scan serial unbind"
    enum_operations="list string-marshalling codebase localhost-bypass security-manager jep290 filter-bypass activator"

    # Current word is not an option and previous word is not a value_option
    if ! _comp_contains "$value_options" $prev && [[ "$cur" != -* ]]; then

        # If only host was specified so far - complete nothing
        if [[ $args -eq 2 ]]; then
            return 0

        # If host and port are specified - complete actions
        elif [[ $args -eq 3 ]]; then
            opts=$operations
            mapfile -t COMPREPLY < <(compgen -W "${opts}" -- "${cur}")
            return 0

        # If host and port are specified and action is enum - complete scan actions
        elif [[ $args -ge 4 && "$arg" = "enum" ]]; then
            opts=$enum_operations
            _comp_filter "opts"
            mapfile -t COMPREPLY < <(compgen -W "${opts}" -- "${cur}")
            return 0

        # If host, port and action are specified - complete depending on action (stored in ${arg} by _comp_get_parameter 3)
        elif [[ $args -eq 4 ]]; then

            # If action expects an gadget, complete gadgets
            if _comp_contains "listen serial" $arg; then
                opts=$gadgets
                mapfile -t COMPREPLY < <(compgen -W "${opts}" -- "${cur}")
                return 0

            # Complete local addresses for bind and rebind
            elif _comp_contains "bind rebind" $arg; then
                _ip_addresses
                compopt -o nospace
                return 0

            # If action expects something non guessable, complete nothing
            elif _comp_contains "codebase unbind" $arg; then
                return 0
            fi

        # If host, port, action and another argument was specified...
        elif [[ $args -eq 5 ]]; then

            # ... and action expects a listener as second arg, complete local addresses
            if _comp_contains "bind codebase rebind" $arg; then
                _ip_addresses
                compopt -o nospace
                return 0

            # ... and the next argument cannot be guessed, complete nothing
            elif _comp_contains "listen serial" $arg; then
                return 0
            fi

            # otherwise, just complete options again
        fi
    fi

	# filename completions
	if _comp_contains "--config --plugin --sample-folder --template-folder --wordlist-file --wordlist-folder --yso" $prev; then
        _filedir
		return 0

	# signature completions
	elif _comp_contains "--signature" $prev; then
        opts="bind lookup rebind unbind clean dirty"

	# component completions
	elif _comp_contains "--component" $prev; then
        opts="act dgc reg"

	# No completions
	elif _comp_contains "--argument-position --bound-name --objid --signature --threads" $prev; then
		return 0

	# otherwise, just complete options
	else 
		opts="--argument-position"
		opts="$opts --bound-name"
		opts="$opts --component"
		opts="$opts --config"
		opts="$opts --create-samples"
		opts="$opts --follow"
		opts="$opts --force-guessing"
		opts="$opts --gopher"
		opts="$opts --guess-duplicates"
		opts="$opts --help"
		opts="$opts --help"
		opts="$opts --localhost-bypass"
		opts="$opts --no-color"
		opts="$opts --objid"
		opts="$opts --plugin"
		opts="$opts --sample-folder"
		opts="$opts --signature"
		opts="$opts --ssl"
		opts="$opts --ssrf"
		opts="$opts --ssrf-response"
		opts="$opts --stack-trace"
		opts="$opts --template-folder"
		opts="$opts --threads"
		opts="$opts --trusted"
		opts="$opts --update"
		opts="$opts --verbose"
		opts="$opts --wordlist-file"
		opts="$opts --wordlist-folder"
		opts="$opts --yso"
		opts="$opts --zero-arg"
	fi

    _comp_filter "opts"
    _comp_filter_shorts "opts"

	mapfile -t COMPREPLY < <(compgen -W "${opts}" -- "${cur}") 
	return 0
}

complete -F _rmg rmg
